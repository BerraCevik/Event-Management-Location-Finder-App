<h2>OpenStreetMap</h2>
<div id="map" style="height: 500px; width: 100%;"></div>
<select id="routeMode" style="margin-top: 10px;">
    <option value="car">Arabayla</option>
    <option value="bike">Bisikletle</option>
    <option value="foot">Yürüyerek</option>
</select>
<button id="drawRoute" style="margin-top: 10px;">Rota Oluştur</button>

<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />

<script>
    var konumlar = @Html.Raw(Json.Serialize(ViewData["Konumlar"])); // Konumları alın

    var map = L.map('map').setView([0, 0], 2);
    var selectedCoordinates = null;
    var userCoordinates = null;

    // OpenStreetMap Tile Layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Renkli işaretçileri tanımlama
    var blueIcon = L.icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    var redIcon = L.icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });

    // Kullanıcı ve etkinlik konumları
    konumlar.forEach((konum, index) => {
        var coordinates = konum.split(',');
        var marker;

        if (index === 0) {
            userCoordinates = [parseFloat(coordinates[0]), parseFloat(coordinates[1])];
            marker = L.marker(userCoordinates, { icon: blueIcon }).addTo(map)
                .bindPopup("Kullanıcının Kendi Konumu")
                .openPopup();
        } else {
            marker = L.marker([parseFloat(coordinates[0]), parseFloat(coordinates[1])], { icon: redIcon }).addTo(map)
                .bindPopup("Kullanıcının Katıldığı Etkinlik Konumu")
                .on('click', function () {
                    selectedCoordinates = [parseFloat(coordinates[0]), parseFloat(coordinates[1])];
                    this.openPopup();
                });
        }
    });

    if (konumlar.length > 0) {
        var firstCoordinates = konumlar[0].split(',');
        map.setView([parseFloat(firstCoordinates[0]), parseFloat(firstCoordinates[1])], 13);
    }

    // Routing Machine
    var routeControl = L.Routing.control({
        waypoints: [],
        createMarker: function () { return null; },  // Markerlari engelle
        routeWhileDragging: true
    }).addTo(map);

    // Rota çizmek için butona tıklandığında yapılacak işlem
    document.getElementById('drawRoute').addEventListener('click', function () {
        if (userCoordinates && selectedCoordinates) {
            var mode = document.getElementById('routeMode').value;
            var transportMode;

            // Seçilen moda göre rota tipi belirleme
            if (mode === 'car') {
                transportMode = 'car';
            } else if (mode === 'bike') {
                transportMode = 'bike';
            } else if (mode === 'foot') {
                transportMode = 'foot';
            } else {
                transportMode = 'car'; // Varsayılan olarak araba
            }

            // Debugging - Seçilen modun doğru alındığını kontrol et
            console.log(`Selected mode: ${mode}`);
            console.log(`Constructed service URL: https://router.project-osrm.org/route/v1/${transportMode}/`);

            // Rota için mod seçimi
            routeControl.options.router = L.Routing.osrmv1({
                serviceUrl: `https://router.project-osrm.org/route/v1/${transportMode}/`
            });

            // Rota çizme
            routeControl.setWaypoints([
                L.latLng(userCoordinates[0], userCoordinates[1]),
                L.latLng(selectedCoordinates[0], selectedCoordinates[1])
            ]);

            // Yola ilişkin hataları kontrol et
            routeControl.on('routesfound', function (e) {
                if (e.routes.length === 0) {
                    alert("Rota bulunamadı, lütfen tekrar deneyin.");
                } else {
                    console.log("Route found", e.routes);
                }
            });

            // Hata mesajı: Rota için bir yanıt alınamazsa
            routeControl.on('routeerror', function (e) {
                alert("Rota hesaplama hatası: " + e.error);
            });
        } else {
            alert("Lütfen bir etkinlik seçin!");
        }
    });
</script>
